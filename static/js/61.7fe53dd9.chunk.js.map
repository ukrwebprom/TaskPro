{"version":3,"file":"static/js/61.7fe53dd9.chunk.js","mappings":"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","sources":["components/Button/Button.jsx","webpack://taskpro/./src/components/Button/Button.module.css?ce6f","webpack://taskpro/./src/components/Dashboard/Dashboard.module.css?596c","webpack://taskpro/./src/components/forms/ColumnForm/ColumnForm.module.css?f7f7","components/forms/ColumnForm/ColumnForm.js","webpack://taskpro/./src/components/forms/CardForm/CardForm.module.css?eb21","webpack://taskpro/./src/components/MainButton/MainButton.module.css?13b8","components/MainButton/MainButton.jsx","webpack://taskpro/./src/components/forms/MyDatepicker/Modal.MyDatepicker.css?7b7a","components/forms/MyDatepicker/MyDatepicker.jsx","components/forms/CardForm/CardForm.js","webpack://taskpro/./src/components/Task/Task.module.css?22e8","components/Task/Task.jsx","webpack://taskpro/./src/components/Column/Column.module.css?790f","components/Column/Column.jsx","webpack://taskpro/./src/components/Background/Background.module.css?ea01","components/Background/Background.jsx","components/Dashboard/Dashboard.jsx","webpack://taskpro/./src/components/Modal/Modal.module.css?28d7","components/Modal/Modal.jsx","redux/boards/selectors.js","hooks/useBoards.js","schems/validationCardSchema.js","schems/validationColumnSchema.js"],"sourcesContent":["import React from 'react';\n\nconst Button = ({ type = 'button', className, children, ...otherProps }) => {\n  return (\n    <button type={type} className={className} {...otherProps}>\n      {children}\n    </button>\n  );\n};\nexport default Button;\n","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"Button_btn__RBtNK\",\"send\":\"Button_send__7pxvY\",\"auth\":\"Button_auth__BkuPE\",\"add\":\"Button_add__P1S6t\",\"column\":\"Button_column__fpWZZ\",\"card\":\"Button_card__njWyg\",\"plus\":\"Button_plus__QoMaE\",\"plus-column\":\"Button_plus-column__2jD+V\"};","// extracted by mini-css-extract-plugin\nexport default {\"dashboardContainer\":\"Dashboard_dashboardContainer__h9EHF\",\"dashboardHeader\":\"Dashboard_dashboardHeader__u6JOV\",\"dashboardTitle\":\"Dashboard_dashboardTitle__kWQ73\",\"listArea\":\"Dashboard_listArea__tF0OG\",\"columnsList\":\"Dashboard_columnsList__ZTLM6\"};","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"ColumnForm_title__N+WBT\",\"input\":\"ColumnForm_input__8J-rP\",\"btn\":\"ColumnForm_btn__h4P97\",\"wrapperIcon\":\"ColumnForm_wrapperIcon__VDdRm\",\"addCard\":\"ColumnForm_addCard__XH0Te\",\"addCardButton\":\"ColumnForm_addCardButton__7MqVy\"};","import React from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { validationColumnSchema } from \"..//..//..//schems/validationColumnSchema\";\nimport Button from 'components/Button/Button';\nimport Icon from 'components/Icon/Icon';\nimport s from \"./ColumnForm.module.css\"\n\n\nexport const ColumnForm = ({ setTitle, onClose, defaultValues }) => {\n  const initialValues = {\n    title: \"\",\n  };\n\n  const onSubmit = (values, { setSubmitting, resetForm }) => {\n    setTitle(values);\n    setSubmitting(false);\n    resetForm();\n    onClose();\n  };\n\n  return (\n    <Formik\n      initialValues={defaultValues? defaultValues : initialValues}\n      validationSchema={validationColumnSchema}\n      onSubmit={onSubmit}\n      validateOnBlur\n    >\n      {({ isSubmitting, dirty, handleSubmit }) => (\n          <div className={s.wrap}>\n        <Form onSubmit={handleSubmit}>\n{/*           <p className={s.title}>Add column</p> */}\n          <label>\n            <Field \n             className={s.input}\n            type=\"text\" name=\"title\"\n            placeholder=\"Title\"  />\n            <ErrorMessage name=\"title\" />\n          </label>\n\n          <Button className={s.btn} type=\"submit\" disabled={isSubmitting || !dirty}> \n          {' '}\n        <div className={s.wrapperIcon}>\n          <Icon name={'#plus-icon'} />\n        </div>\n        <span className={s.addCard}>Add </span></Button>\n        </Form></div>\n      )}\n    </Formik>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"CardForm_title__SiQAb\",\"input\":\"CardForm_input__yJbzt\",\"comment\":\"CardForm_comment__FOY9N\",\"lowInput\":\"CardForm_lowInput__WLx4w\",\"btn\":\"CardForm_btn__q6ml4\",\"datepicker\":\"CardForm_datepicker__dkvMY\",\"item_tittle\":\"CardForm_item_tittle__xYf2W\",\"label_wrapper\":\"CardForm_label_wrapper__FyCEU\"};","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"MainButton_btn__ZY8Bv\",\"btnContext\":\"MainButton_btnContext__qTeyZ\",\"iconBtn\":\"MainButton_iconBtn__YDe3c\",\"buttonName\":\"MainButton_buttonName__924zN\"};","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport Icon from 'components/Icon/Icon';\nimport css from './MainButton.module.css';\n\nconst MainButton = ({\n  btnName,\n  iconName,\n  onClick,\n  ...btnProps\n}) => {\n  console.log('iconName', iconName);\n  return (\n    <button\n      className={css.btn}\n      type=\"button\"\n      onClick={onClick}\n      {...btnProps}\n    >\n      <div className={css.btnContext}>\n        {!!iconName?.length && (\n          <div className={css.iconBtn}>\n            <Icon\n              // color='rgba(255, 255, 255, 1)'\n              name={iconName}\n              width='14px'\n              height='14px'\n            />\n          </div>\n        )}\n        <p className={css.buttonName}>{btnName}</p>\n      </div>\n    </button>\n  );\n};\n\nMainButton.propTypes = {\n  btnName: PropTypes.string.isRequired,\n  btnProps: PropTypes.object,\n  iconName: PropTypes.string,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default MainButton;","// extracted by mini-css-extract-plugin\nexport default {};","// import { useDispatch } from \"react-redux\";\nimport {\n    forwardRef,\n    // useEffect,\n    useState\n} from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nimport styleDatepicker from \"./Modal.MyDatepicker.css\"; \nimport Icon from \"components/Icon/Icon\";\n\nconst newDate = new Date()\n\nexport const MyDatepicker = () => {\n    const [selectedDate, setSelectedDate] = useState(newDate);\n    // const dispatch = useDispatch();\n\n    // useEffect(() => {\n    //     dispatch(udateDeadline(selectedDate.toLocaleDateString()))\n    // }, [dispatch, selectedDate]);\n\n    const CustomInput = forwardRef(({ value, onClick }, ref) => (\n        <p className=\"example-custom-input\" onClick={onClick} ref={ref}>\n            <p>{value}</p>\n            <Icon name=\"#chevron-down-icon\" width='20px' height='20px' color='#BEDBB0'/>\n        </p>\n    ));\n\n    return (\n        <p>\n            {selectedDate.toLocaleDateString() === newDate.toLocaleDateString() &&\n                <span className=\"deadline\">Today, </span>}\n            <DatePicker\n                selected={selectedDate}\n                onChange={date => setSelectedDate(date)}\n                minDate={new Date()}\n                dateFormat='MMMM d'\n                className={styleDatepicker}\n                customInput={<CustomInput />}\n            />          \n        </p>\n    )\n}","import React, { useState, useEffect } from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { validationCardSchema } from '..//..//..//schems/validationCardSchema';\nimport s from './CardForm.module.css';\nimport MainButton from '../../MainButton/MainButton';\nimport { MyDatepicker } from '../MyDatepicker/MyDatepicker';\n\nconst labelColors = [\n  '#8FA1D0',\n  '#E09CB5',\n  '#BEDBB0',\n  'rgba(255, 255, 255, 0.30)',\n];\nconsole.log(labelColors);\nconst colorsToLables = {\n  none: 'rgba(255, 255, 255, 0.30)',\n  low: '#8FA1D0',\n  medium: '#E09CB5',\n  high: '#BEDBB0',\n};\n\nexport const CardForm = ({ taskData, onClose }) => {\n  const [level, setLevel] = useState(\"none\");\n  console.log('level', level);\n\n  useEffect(() => {\n    let newLevel = level;\n    if(taskData?.priority){\n      newLevel = taskData.priority;\n    };\n    setLevel(newLevel);\n   }, [taskData, level]);\n\n// useState = {\n//   taskData.priority ? taskData.priority : withoutPriority,\n//   labelColor: taskData?.levelIndex\n//       ? labelColors[taskData.levelIndex]\n//       : labelColors[0],\n//     deadline: taskData?.endDate || new Date(),\n// }\n\n\n  const initialValues = {\n    title: taskData?.title || '',\n    description: taskData?.description || '',\n    // labelColor: taskData?.levelIndex\n    //   ? labelColors[taskData.levelIndex]\n    //   : labelColors[0],\n    // deadline: taskData?.endDate || new Date(),\n  };\n\n  const onSubmit = (values, { setSubmitting, resetForm }) => {\n    console.log(values);\n    setSubmitting(false);\n    taskData(values);\n    resetForm();\n    onClose();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={validationCardSchema}\n      onSubmit={onSubmit}\n    >\n      {({ values, isSubmitting, dirty, touched, errors, handleSubmit }) => (\n        <Form className={s.formbackround} onSubmit={handleSubmit}>\n          <label>\n            <Field\n              className={s.input}\n              type=\"text\"\n              name=\"title\"\n              placeholder=\"Title\"\n              onBlur={touched.fieldName && errors.fieldName}\n            />\n            <ErrorMessage name=\"title\" />\n          </label>\n\n          <label>\n            <Field\n              className={s.comment}\n              as=\"textarea\"\n              placeholder=\"Description\"\n              name=\"description\"\n              onBlur={touched.fieldName && errors.fieldName}\n            />\n            <ErrorMessage name=\"description\" />\n          </label>\n          <label className={s.item_tittle}>Label Color</label>\n          {/* <div className={s.label_color}> */}\n            {Object.entries(colorsToLables).map(([code, colorL]) => (\n            // Вариант 1\n              // <li>\n              //   <label className={s.lowInput} styles={{ color: colorL }}>\n              //     <input\n              //       className={s.lowInput}\n              //       type=\"radio\"\n              //       value={code}\n              //       checked={level === code}\n              //       onChange={({ target }) => setLevel(target.value)}\n              //     />\n              //   </label>\n              // </li>\n              <label key={code}>\n              <Field\n              styles={{ color: colorL }}\n             // className={s.lowInput}\n              type=\"radio\"\n              name=\"labelColor\"\n              value={code}\n              checked={level === code}\n              onChange={({ target }) => setLevel(target.value)}\n             />\n           </label>\n              //Вариант 2\n              // <label key={code}>\n              //   <Field\n              //   // className={s.lowInput}\n              //     type=\"radio\"\n              //     name=\"labelColor\"\n              //     value={code}\n              //     checked={values.level === code}\n              //     onBlur={touched.fieldName && errors.fieldName}\n              //   />\n              //   <span style={{ backgroundColor: color }}></span>\n              // </label>\n              // вариант 3\n         \n            ))}\n          {/* </div> */}\n          <ErrorMessage name=\"labelColor\" />\n          <label className={s.item_tittle}>Deadline</label>\n          <MyDatepicker />\n          <MainButton\n            btnName={taskData?.id ? 'Edit' : 'Add'}\n            iconColor=\"#2a2a2a\"\n            iconName=\"#plus-icon\"\n            disabled={isSubmitting || !dirty}\n            type=\"submit\"\n/*             onClick={() => {}} */\n          />\n        </Form>\n      )}\n    </Formik>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Task_wrapper__zvx3s\",\"title\":\"Task_title__Xru5J\",\"wrapper_text\":\"Task_wrapper_text__j81u7\",\"elips_text\":\"Task_elips_text__hFFk7\",\"icon_info\":\"Task_icon_info__XTZW9\",\"divider\":\"Task_divider__l4ivZ\",\"card\":\"Task_card__FnGV1\",\"card_priority\":\"Task_card_priority__T0BtA\",\"status\":\"Task_status__d7AD7\",\"day\":\"Task_day__vb3vl\",\"card_title\":\"Task_card_title__EJmKX\",\"priority\":\"Task_priority__Pfgev\",\"delete_icon\":\"Task_delete_icon__gYHNZ\",\"edit_icon\":\"Task_edit_icon__pwmWM\",\"icon_buttons\":\"Task_icon_buttons__RD8v8\",\"popoverItem\":\"Task_popoverItem__R+N1f\",\"popoverBtn\":\"Task_popoverBtn__7OhL1\",\"icon_list\":\"Task_icon_list__yzZ3D\",\"popover_list\":\"Task_popover_list__z+Ffs\",\"popoverStatus\":\"Task_popoverStatus__eqjPy\"};","import React, { useMemo, useState } from 'react';\nimport { useAuth } from '../../hooks/useAuth';\nimport PropTypes from 'prop-types';\nimport EllipsisText from 'react-ellipsis-text';\nimport Tooltip from '@mui/material/Tooltip';\nimport Popover from '@mui/material/Popover';\nimport styled from '@emotion/styled';\n\nimport Modal from 'components/Modal/Modal';\nimport css from './Task.module.css';\nimport { CardForm } from 'components/forms/CardForm/CardForm';\nimport Icon from 'components/Icon/Icon';\n\nconst levelsToIndexes = {\n  0: 'Without priority',\n  1: 'Low',\n  2: 'Medium',\n  3: 'High',\n};\n\nconst getPopoverItems = {\n  dark: {\n    hc: '#bedbb0',\n    bg: '#1F1F1F',\n    tc: 'rgba(255, 255, 255, 0.50)',\n  },\n  violet: {\n    hc: '#5255bc',\n    bg: '#FCFCFC',\n    tc: '#161616',\n  },\n  light: {\n    hc: '#bedbb0',\n    bg: '#FCFCFC',\n    tc: '#161616',\n  }\n};\n\nconst PopupWrapper = styled.div`\n  background-color: ${({ popStyles }) => popStyles.bg};\n`;\n\nconst ItemWrapper = styled.li`\n  color: ${({ popStyles }) => popStyles.tc};\n  &:hover{\n    color: ${({ popStyles }) => popStyles.hc};\n   }\n`;  \n\nconst Task = ({ taskData, columnList }) => {\n  const authContext = useAuth();\n  const { user } = authContext;\n\n  const [isEditTaskOpened, setEditTaskOpened] = useState(false);\n  const [moveAnchorEl, setMoveAnchorEl] = useState(null);\n\n  const openMovePopover = Boolean(moveAnchorEl);\n  const id = useMemo(() => (openMovePopover ? 'move-popover' : undefined)\n  , [openMovePopover]);\n\n  const popStyles  = useMemo(() => getPopoverItems[user.theme], [user.theme]);\n\n  return (\n    <>\n      <ul className={css.wrapper}>\n        <li key={taskData.id}>\n          <h2 className={css.title}>{taskData.title}</h2>\n          <div className={css.wrapper_text}>\n            <EllipsisText\n              className={css.elips_text}\n              text={taskData.description}\n              length={90}\n            />\n          </div>\n          <div className={css.divider} />\n          <div className={css.card}>\n            <div className={css.card_priority}>\n              <div className={css.card_title}>\n                <p className={css.priority}>Priority</p>\n                <p className={css.status}>\n                  {levelsToIndexes[taskData.priority]}\n                </p>\n              </div>\n              <div className={css.card_dedline}>\n                <p className={css.priority}>Deadline</p>\n                <p className={css.day}>23/06/2023</p>\n              </div>\n            </div>\n            <div className={css.icon_list}>\n            <Tooltip title=\"Attation\">\n            <Icon\n                    className={css.icon_info}\n                    sprite={2}\n                    name={'#bell-icon'}\n                    width=\"16\"\n                    height=\"16\"\n                    stroke=\"var( --index-label-color)\"\n                  />\n            </Tooltip>\n              <Tooltip title=\"Move\">\n                <button\n                  aria-describedby={id}\n                  disabled={!columnList.length}\n                  type=\"button\"\n                  className={css.icon_buttons}\n                  onClick={event => setMoveAnchorEl(event.currentTarget)}\n                  variant=\"contained\"\n                >\n                  <Icon\n                    className={css.icon_info}\n                    sprite={2}\n                    name={'#arrow-circle-icon'}\n                    width=\"16\"\n                    height=\"16\"\n                    stroke=\"var( --index-label-color)\"\n                  />\n                </button>\n              </Tooltip>\n              <Tooltip title=\"Edit\">\n                <button\n                  type=\"button\"\n                  className={css.icon_buttons}\n                  onClick={() => setEditTaskOpened(true)}\n                >\n                  <Icon\n                    sprite={2}\n                    name={'#pencil-icon'}\n                    width=\"16\"\n                    height=\"16\"\n                    stroke=\"var( --index-label-color)\"\n                  />\n                </button>\n              </Tooltip>\n              <Tooltip title=\"Delete\">\n                <button type=\"button\" className={css.icon_buttons}>\n                  <Icon\n                    sprite={2}\n                    name={'#trash-icon'}\n                    width=\"16\"\n                    height=\"16\"\n                    stroke=\"var( --index-label-color)\"\n                  />\n                </button>\n              </Tooltip>\n            </div>\n          </div>\n        </li>\n      </ul>\n      {isEditTaskOpened && (\n        <Modal\n          name={taskData.id ? 'Edit card' : 'Add card'}\n          onClick={event => {\n            if (event.currentTarget === event.target) {\n              setEditTaskOpened(false);\n            }\n          }}\n          onClose={() => setEditTaskOpened(!isEditTaskOpened)}\n        >\n          <CardForm taskData={taskData} />\n        </Modal>\n      )}\n      <Popover\n        id={id}\n        open={openMovePopover}\n        anchorEl={moveAnchorEl}\n        onClose={() => setMoveAnchorEl(null)}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'center',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'center',\n        }}\n        sx={{ \n          \"& .MuiPopover-paper\": {\n            backgroundColor: 'inherit',\n            borderRadius: '8px',\n          }\n        }}\n      >\n        <PopupWrapper popStyles={popStyles}>\n          <ul className={css.popover_list}>\n            {columnList?.map(column => (\n              <ItemWrapper className={css.popoverItem} key={column.name} popStyles={popStyles}>\n                <button\n                  onClick={() => setMoveAnchorEl(null)}\n                  className={css.popoverBtn}\n                >\n                <p className={css.popoverStatus}>{column.name}</p>\n                </button>\n                <Icon\n                  sprite={2}\n                  name={'#arrow-circle-icon'}\n                  width=\"16\"\n                  height=\"16\"\n                />\n              </ItemWrapper>\n            ))}\n          </ul>\n        </PopupWrapper>\n      </Popover>\n    </>\n  );\n};\n\nTask.propTypes = {\n  taskData: PropTypes.object.isRequired,\n};\n\nexport default Task;\n","// extracted by mini-css-extract-plugin\nexport default {\"containerColumn\":\"Column_containerColumn__PTd6q\",\"wrapperTitleColumn\":\"Column_wrapperTitleColumn__MBJtb\",\"titleColumn\":\"Column_titleColumn__M4jvP\",\"columnBottom\":\"Column_columnBottom__Tz8oC\",\"columnMiddle\":\"Column_columnMiddle__KGyL1\",\"listTask\":\"Column_listTask__ADLCl\",\"task\":\"Column_task__UdfBF\",\"addCardButton\":\"Column_addCardButton__wS2Pt\",\"addCard\":\"Column_addCard__Pihtw\",\"wrapperButton\":\"Column_wrapperButton__mTnTt\",\"buttonColumn\":\"Column_buttonColumn__B7sLN\",\"wrapperIcon\":\"Column_wrapperIcon__pG1YL\"};","import { nanoid } from 'nanoid';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { ColumnForm } from 'components/forms/ColumnForm/ColumnForm';\nimport { CardForm } from 'components/forms/CardForm/CardForm';\nimport { updateColumnTitle, deleteColumn } from 'redux/boards/operations';\nimport Modal from '../Modal/Modal';\nimport Task from 'components/Task/Task';\nimport Icon from '../Icon';\n\nimport css from './Column.module.css';\n\nexport const Column = ({data}) => {\n  const dispatch = useDispatch();\n  const [showColumnModal, setShowColumnModal] = useState(false);\n  const [showTaskModal, setShowTaskModal] = useState(false);\n\n  const toggleColumnModal = () => setShowColumnModal(c => !c);\n  const handleEditColumn = value => dispatch(updateColumnTitle({...data, ...value}));\n  const handleDelete = () => dispatch(deleteColumn(data._id));\n\n  const toggleTaskModal = () => setShowTaskModal(c => !c);\n/*   const makeTask = task => {\n    if (listTask === null) {\n      setListTask([task]);\n    } else {\n      setListTask(prevTasks => {\n        return [...prevTasks, task];\n      });\n    }\n  }; */\n  return (\n    <>\n    <section className={css.containerColumn}>\n      <div className={css.wrapperTitleColumn}>\n        <h3 className={css.titleColumn}>{data.title}</h3>\n        <div className={css.wrapperButton}>\n          <button\n            className={css.buttonColumn}\n            type=\"button\"\n            onClick={toggleColumnModal}\n          >\n            <Icon name={'#pencil-icon'} />\n          </button>\n          <button className={css.buttonColumn} onClick={handleDelete}>\n            <Icon name={'#trash-icon'} />\n          </button>\n        </div>\n      </div>\n\n      <div className={css.columnMiddle}>\n      <ul className={css.listTask}>\n        {data.tasks &&\n          data.tasks.map(task => \n            (\n              <Task\n                key={nanoid()}\n                taskData={task}\n                columnList={[{name: 'todo'}, {name: 'Done'}]}\n              />\n            )\n          )}\n      </ul>\n      </div>\n\n      <div className={css.columnBottom}>\n      <button\n        type=\"button\"\n        className={css.addCardButton}\n        onClick={toggleTaskModal}\n      >\n        {' '}\n        <div className={css.wrapperIcon}>\n          <Icon name={'#plus-icon'} />\n        </div>\n        <span className={css.addCard}>Add another card</span>\n      </button>\n      </div>\n    </section>\n\n    {showColumnModal && ( \n      <Modal onClose={toggleColumnModal} name = \"Edit column\">\n        <ColumnForm defaultValues={{title:data.title}} setTitle={handleEditColumn} onClose={toggleColumnModal} />\n      </Modal>\n    )}\n    {showTaskModal && ( \n      <Modal onClose={toggleTaskModal} name = \"Add card\">\n        <CardForm defaultValues={{title:data.title}} setTitle={handleEditColumn} onClose={toggleTaskModal} />\n      </Modal>\n    )}\n    </>\n  );\n};\n\n\n/* {showModalCreateTasks && (\n  <Modal\n    name=\"Add card\"\n    onClick={event => {\n      if (event.currentTarget === event.target) {\n        toggleModalCreateTasks();\n      }\n    }}\n    onClose={toggleModalCreateTasks}\n  >\n    <CardForm taskData={makeTask} onClose={toggleModalCreateTasks} />\n  </Modal>\n)}\n */","// extracted by mini-css-extract-plugin\nexport default {\"back\":\"Background_back__-izDK\"};","import css from './Background.module.css';\nimport {useMedia} from 'react-use';\nimport { useBoards } from 'hooks/useBoards'\n\nexport const Background = ({children}) => {\n    const {boards, current} = useBoards();\n    const isWide = useMedia('(min-width: 1280px)');\n    const isMobile = useMedia('(max-width: 320px)');\n    const userRatio = useMedia('(-webkit-min-device-pixel-ratio: 2)')? \"2x\":\"1x\";\n    const userScreen = isWide? \"1280\" : isMobile? \"320-min\" : \"768-min\";\n    const selectedBgIndex = boards[current].background;\n    const url = `https://res.cloudinary.com/pro-task-cloud/image/upload/v1687806931/backgrounds/diego-ph-wyeapf7Gy-U-unsplash%20${selectedBgIndex}%40${userRatio}_${userScreen}.jpg.webp`;\n    const bg = boards[current].background? {backgroundImage:`url(${url})`} : {backgroundColor:'white'};\n    return(\n        <div className={css.back} style={bg}>\n            {children}\n        </div>\n    )\n}","import React from \"react\";\nimport { useDispatch } from 'react-redux';\nimport { addColumn } from 'redux/boards/operations';\nimport Button from \"components/Button/Button\";\nimport btn from \"../Button/Button.module.css\";\nimport { useBoards } from 'hooks/useBoards'\n/* import Button from \"components/Button\"; */\nimport css from \"./Dashboard.module.css\";\nimport { useState } from \"react\";\nimport { Column } from \"components/Column/Column\";\n/* import FiltersButton from \"components/Filters/FiltersButton\";\nimport FiltersModal from \"components/Filters/FiltersModal\"; */\nimport { Background } from \"components/Background/Background\";\nimport Modal from \"components/Modal/Modal\";\nimport { ColumnForm } from 'components/forms/ColumnForm/ColumnForm';\n\nconst DashBoard = () => {\n  const dispatch = useDispatch();\n  const {current, currentData} = useBoards();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const toggleModal = () => setIsModalOpen(c => !c)\n  const handleAddColumn = value => {\n    dispatch(addColumn({board: currentData._id,...value}));\n  }\n\n /*  \n  const setBoardBg = async (newBgIndex) => {\n    try {\n      await updBg(boards[current]._id, { background: newBgIndex });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  const handleBgClick = (index) => {\n    if (index === 0) {\n      setSelectedBgIndex(null);\n      setBoardBg(null);\n    } else {\n      setSelectedBgIndex(index.toString());\n      setBoardBg(index.toString());\n    }\n  };\n\n  const openModal = () => {\n    setIsModalOpen(true);\n  };\n\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n\n  useEffect(() => {\n    const handleEscapeKey = (event) => {\n      if (event.key === \"Escape\") {\n        closeModal();\n      }\n    };\n    window.addEventListener(\"keydown\", handleEscapeKey);\n\n    return () => {\n      window.removeEventListener(\"keydown\", handleEscapeKey);\n    };\n  }, []); */\n\n  return ( \n    <>\n    {\n      current!== null &&\n      <Background>\n      <div className={css.dashboardContainer}>\n      <div className={css.dashboardHeader}>\n        <h2 className={css.dashboardTitle}>{currentData.title}</h2>\n\n{/*         <FiltersButton onClick={openModal} /> */}\n{/*         {isModalOpen && (\n          <FiltersModal\n            isOpen={isModalOpen}\n            onClose={closeModal}\n            handleBgClick={handleBgClick}\n            selectedBgIndex={selectedBgIndex}\n          />\n        )} */}\n      </div>\n      <div className={css.listArea}>\n        <ul className={css.columnsList}>\n          {currentData.columns.length > 0 &&\n            currentData.columns.map((column) => {\n              return (\n                <li key={column._id}>\n                  <Column data={column} />\n                </li>\n              );\n            })}\n          <li>\n            <Button className={`${btn.btn} ${btn.column}`} onClick={toggleModal}>\n              <div className={`${btn.plus} ${btn.plusColumn}`}>+</div>Add\n              another column\n            </Button>\n          </li>\n        </ul>\n      </div>\n    </div>\n    </Background>\n    }\n    {isModalOpen && \n    <Modal onClose={toggleModal} name = \"Add column\">\n      <ColumnForm setTitle={handleAddColumn} onClose={toggleModal} />\n    </Modal>}\n    </>\n   \n  );\n};\n\nexport default DashBoard;\n","// extracted by mini-css-extract-plugin\nexport default {\"backdrop\":\"Modal_backdrop__xTnIT\",\"modal_content\":\"Modal_modal_content__-WSAd\",\"modal_items\":\"Modal_modal_items__mpOoe\",\"close_button\":\"Modal_close_button__4xTF9\",\"modal_title\":\"Modal_modal_title__q1YD4\"};","import React from 'react';\n\n// import { useEffect } from 'react';\n// import { createPortal } from 'react-dom';\nimport css from './Modal.module.css';\nimport Icon from 'components/Icon/Icon';\n\n// const modalRoot = document.querySelector('#modal-root');\n\n// const Modal = ({ children, onClose, onClick }) => {\n//   useEffect(() => {\n//     window.addEventListener('keydown', handleKeyDown);\n//     return () => {\n//       window.removeEventListener('keydown', handleKeyDown);\n//     };\n//   }, []);\n\n//   const handleKeyDown = e => {\n//     if (e.code === 'Escape') {\n//       onClose();\n//     }\n//   };\n\n//   const handleBackdropClick = event => {\n//     if (event.currentTarget === event.target) {\n//       onClose();\n//     }\n//   };\n//   return createPortal(\n//     <div className={css.backdrop} onClick={handleBackdropClick}>\n//       <div className={css.modal_content}>\n//         {children}\n//       </div>\n//     </div>,\n//     modalRoot\n//   );\n// };\n\n// export default Modal;\n\nconst Modal = ({ children, isOpen, name, onClose }) => {\n  return (\n    <div className={`modal ${isOpen ? \"open\" : \"\"}`}>\n      <div className={css.modal_content}>\n        <button className={css.close_button} onClick={onClose}>\n          <Icon\n            sprite={2}\n            name={'#close-icon'}\n            width=\"18\"\n            height=\"18\"\n            stroke='var( --index-label-color)'\n          />\n        </button>\n        <div className={css.modal_items}>\n          <h2 className={css.modal_title}>{name}</h2>\n        </div>\n        <div className=\"modalBody\">\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Modal;\n","export const selectBoards = state => state.boards.items;\n\nexport const selectIsLoading = state => state.boards.isLoading;\n\nexport const selectError = state => state.boards.error;\n\nexport const selectCurrentBoard = state => state.boards.currentBoard;\n\nexport const selectCurrentBoardData = state => state.boards.items[state.boards.currentBoard];","import { useSelector } from 'react-redux';\nimport {\n  selectBoards,\n  selectError,\n  selectCurrentBoard,\n  selectCurrentBoardData\n} from 'redux/boards/selectors';\n\nexport const useBoards = () => {\n  const boards = useSelector(selectBoards);\n  const current = useSelector(selectCurrentBoard);\n  const error = useSelector(selectError);\n\n  const currentData = useSelector(selectCurrentBoardData);\n\n  return {\n    boards,\n    current,\n    error,\n    currentData\n  };\n};","import * as Yup from \"yup\";\n\nexport const validationCardSchema = Yup.object().shape({\n  title: Yup.string()\n    .required(\"Is Require\")\n    .min(3, \"The title must contain at least 3 characters\"),\n\n  description: Yup.string()\n    .min(5, \"The description must contain at least 5 characters\")\n    .max(200, \"The description must contain less than 200 characters\"),\n\n  labelColor: Yup.string().required(\"Is Require\"),\n});\n","import * as Yup from \"yup\";\n\nexport const validationColumnSchema = Yup.object().shape({\n  title: Yup.string()\n    .required(\"Is Require\")\n    .min(3, \"The title must contain at least 3 characters\"),\n});\n"],"names":["_ref","_ref$type","type","className","children","otherProps","_objectWithoutProperties","_excluded","_jsx","_objectSpread","ColumnForm","setTitle","onClose","defaultValues","Formik","initialValues","title","validationSchema","validationColumnSchema","onSubmit","values","_ref2","setSubmitting","resetForm","validateOnBlur","_ref3","isSubmitting","dirty","handleSubmit","s","wrap","_jsxs","Form","Field","input","name","placeholder","ErrorMessage","Button","btn","disabled","wrapperIcon","Icon","addCard","btnName","iconName","onClick","btnProps","console","log","css","length","width","height","newDate","Date","MyDatepicker","_useState","useState","_useState2","_slicedToArray","selectedDate","setSelectedDate","CustomInput","forwardRef","ref","value","color","toLocaleDateString","DatePicker","selected","onChange","date","minDate","dateFormat","styleDatepicker","customInput","colorsToLables","none","low","medium","high","CardForm","taskData","level","setLevel","useEffect","newLevel","priority","description","validationCardSchema","touched","errors","formbackround","onBlur","fieldName","comment","as","item_tittle","Object","entries","map","_ref4","_ref5","code","colorL","styles","checked","_ref6","target","MainButton","id","iconColor","levelsToIndexes","getPopoverItems","dark","hc","bg","tc","violet","light","PopupWrapper","styled","div","_templateObject","_taggedTemplateLiteral","popStyles","ItemWrapper","li","_templateObject2","columnList","user","useAuth","isEditTaskOpened","setEditTaskOpened","_useState3","_useState4","moveAnchorEl","setMoveAnchorEl","openMovePopover","Boolean","useMemo","undefined","theme","_Fragment","wrapper","wrapper_text","EllipsisText","elips_text","text","divider","card","card_priority","card_title","status","card_dedline","day","icon_list","Tooltip","icon_info","sprite","stroke","icon_buttons","event","currentTarget","variant","Modal","Popover","open","anchorEl","anchorOrigin","vertical","horizontal","transformOrigin","sx","backgroundColor","borderRadius","popover_list","column","popoverItem","popoverBtn","popoverStatus","Column","data","dispatch","useDispatch","showColumnModal","setShowColumnModal","showTaskModal","setShowTaskModal","toggleColumnModal","c","handleEditColumn","updateColumnTitle","toggleTaskModal","deleteColumn","_id","tasks","task","Task","nanoid","Background","_useBoards","useBoards","boards","current","isWide","useMedia","isMobile","userRatio","userScreen","selectedBgIndex","background","url","concat","backgroundImage","style","currentData","isModalOpen","setIsModalOpen","toggleModal","columns","plus","plusColumn","addColumn","board","isOpen","selectBoards","state","items","selectError","error","selectCurrentBoard","currentBoard","selectCurrentBoardData","useSelector","Yup","shape","required","min","max","labelColor"],"sourceRoot":""}