{"version":3,"file":"static/js/62.ebd750da.chunk.js","mappings":"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","sources":["webpack://taskpro/./src/components/WelcomeLayout/WelcomeLayout.module.css?653c","components/WelcomeLayout/WelcomeLayout.jsx","schems/validationLoginSchema.js","schems/validationRegisterSchema.js","webpack://taskpro/./src/components/forms/LoginForm/LoginForm.module.css?8bf3","schems/validationHelpSchema.js","schems/validationNewBoardSchema.js","schems/validationCardSchema.js","schems/validationColumnSchema.js","schems/validationEditProfileSchema.js","components/forms/LoginForm/LoginForm.js","webpack://taskpro/./src/components/forms/RegisterForm/Registerform.module.css?084e","components/forms/RegisterForm/RegisterForm.js","pages/Auth.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"WelcomeLayout_container__KDJpp\",\"content\":\"WelcomeLayout_content__VuvIh\"};","import css from './WelcomeLayout.module.css'\nexport const WelcomeLayout = ({children}) => {\n    return(\n        <div className={css.container}>\n            <div className={css.content}>\n                {children}\n            </div>\n        </div>\n    )\n}","import * as Yup from \"yup\";\n\nexport const validationLoginSchema = Yup.object().shape({\n  email: Yup.string()\n    .required(\"Is Require\")\n    .matches(\n      /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/i,\n      \"This must be a valid email\"\n    ),\n\n  password: Yup.string()\n    .required(\"Is Require\")\n    .matches(\n      /^[a-zA-Z0-9!@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?]+$/,\n      \"The password must contain only Latin letters, numbers and symbols\"\n    )\n    .min(8, \"Password must contain at least 8 characters\")\n    .max(64, \"Password must contain less than 64 characters\"),\n});\n","import * as Yup from \"yup\";\n\nexport const validationRegistrSchema = Yup.object().shape({\n  name: Yup.string()\n    .required(\"Is Require\")\n    .matches(\n      /^[a-zA-Z0-9!@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/? ]*$/,\n      \"The name must contain only Latin letters, numbers and symbols\"\n    )\n    .min(2, \"The name must contain at least 2 characters\")\n    .max(32, \"The name must contain less than 32 characters\"),\n\n  email: Yup.string()\n    .required(\"Is Require\")\n    .matches(\n      /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/i,\n      \"This must be a valid email\"\n    ),\n\n  password: Yup.string()\n    .required(\"Is Require\")\n    .matches(\n      /^[a-zA-Z0-9!@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?]+$/,\n      \"The password must contain only Latin letters, numbers and symbols\"\n    )\n    .min(8, \"Password must contain at least 8 characters\")\n    .max(64, \"Password must contain less than 64 characters\"),\n});\n","// extracted by mini-css-extract-plugin\nexport default {\"regtitle\":\"LoginForm_regtitle__dt-BC\",\"regtitleActive\":\"LoginForm_regtitleActive__O5ybS\",\"loginbackround\":\"LoginForm_loginbackround__+JvM5\",\"input\":\"LoginForm_input__iqQPD\",\"field\":\"LoginForm_field__6D429\",\"titleFild\":\"LoginForm_titleFild__--O5+\"};","import * as Yup from \"yup\";\n\nexport const validationHelpSchema = Yup.object().shape({\n  email: Yup.string()\n    .required(\"Is Require\")\n    .matches(\n      /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/i,\n      \"This must be a valid email\"\n    ),\n\n  comment: Yup.string()\n    .required(\"Is Require\")\n    .min(10, \"The name must contain at least 10 characters\")\n    .max(200, \"The name must contain less than 200 characters\"),\n});\n","import * as Yup from \"yup\";\n\nexport const validationNewBoardSchema = Yup.object().shape({\n  title: Yup.string()\n    .required(\"Is Require\")\n    .min(3, \"The title must contain at least 3 characters\"),\n\n  icon: Yup.string().required(\"Is Require\"),\n\n  background: Yup.string().required(\"Is Require\"),\n});\n","import * as Yup from \"yup\";\n\nexport const validationCardSchema = Yup.object().shape({\n  title: Yup.string()\n    .required(\"Is Require\")\n    .min(3, \"The title must contain at least 3 characters\"),\n\n  description: Yup.string()\n    .min(5, \"The description must contain at least 5 characters\")\n    .max(200, \"The description must contain less than 200 characters\"),\n\n  labelColor: Yup.string().required(\"Is Require\"),\n});\n","import * as Yup from \"yup\";\n\nexport const validationColumnSchema = Yup.object().shape({\n  title: Yup.string()\n    .required(\"Is Require\")\n    .min(3, \"The title must contain at least 3 characters\"),\n});\n","import * as Yup from \"yup\";\n\nexport const validationEditProfileSchema = Yup.object().shape({\n  name: Yup.string()\n    .required(\"Is Require\")\n    .matches(\n      /^[a-zA-Z0-9!@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/? ]*$/,\n      \"The name must contain only Latin letters, numbers and symbols\"\n    )\n    .min(2, \"The name must contain at least 2 characters\")\n    .max(32, \"The name must contain less than 32 characters\"),\n\n  email: Yup.string()\n    .required(\"Is Require\")\n    .matches(\n      /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/i,\n      \"This must be a valid email\"\n    ),\n\n  password: Yup.string()\n    .required(\"Is Require\")\n    .matches(\n      /^[a-zA-Z0-9!@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?]+$/,\n      \"The password must contain only Latin letters, numbers and symbols\"\n    )\n    .min(8, \"Password must contain at least 8 characters\")\n    .max(64, \"Password must contain less than 64 characters\"),\n\n  userPhoto: Yup.mixed()\n    .nullable(true)\n    .test(\"fileSize\", \"File size too large\", (value) => {\n      return !value || (value && value.size <= 4096000); // ~4MB\n    })\n    .test(\"fileType\", \"Invalid file type\", (value) => {\n      return (\n        !value ||\n        (value && [\"image/jpeg\", \"image/png\", \"image/gif\"].includes(value.type))\n      );\n    }),\n});\n","import { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport { validationLoginSchema } from \"schems\";\n\nimport s from \"./LoginForm.module.css\"\nimport { useUser } from \"hooks/useUser\";\n\nexport const LoginForm = () => {\n  const {userLogin} = useUser();\n\n  const handleSubmit = async (values, { setSubmitting, resetForm }) => {\n    \n    try{\n      await userLogin(values);\n      setSubmitting(false);\n      resetForm();\n    } catch(err) {\n      console.log(err);\n    }\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        email: \"\",\n        password: \"\",\n      }}\n      validationSchema={validationLoginSchema}\n      onSubmit={handleSubmit}\n      validateOnBlur\n    >\n      {({ isSubmitting, isValid, dirty }) => (\n        <Form className={s.loginbackround}>\n          <div className={s.titleFild}>\n          <p className= {s.regtitle}>Registration</p>\n          <p  className= {s.regtitleActive}>Log In</p>\n          </div>\n          <div className={s.field}>\n          <label>\n            <Field className= {s.input} name=\"email\" placeholder=\"Enter your email\" type=\"email\" />\n            <ErrorMessage name=\"email\" />\n          </label>\n\n          <label>\n            <Field \n             className= {s.input}\n              name=\"password\"\n              placeholder=\"Confirm a password\"\n              type=\"password\"\n            />\n            <ErrorMessage name=\"password\" />\n          </label>\n          </div>\n          <button type=\"submit\" disabled={isSubmitting || !isValid || !dirty}>\n            Log In Now\n          </button>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"titleFild\":\"Registerform_titleFild__ioAJn\",\"regtitle\":\"Registerform_regtitle__2KOSk\",\"regtitleActive\":\"Registerform_regtitleActive__vQYtO\",\"regbackround\":\"Registerform_regbackround__p+PWu\",\"input\":\"Registerform_input__ozt8M\",\"field\":\"Registerform_field__3T2hC\"};","import { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport { validationRegistrSchema } from \"schems\";\n\nimport s from \"./Registerform.module.css\"\nimport { useUser } from \"hooks/useUser\";\n\nexport const RegisterForm = () => {\n  const {userRegister} = useUser();\n\n  const handleSubmit = async (values, { setSubmitting, resetForm }) => {\n    try {\n      await userRegister(values);\n      setSubmitting(false);\n      resetForm();\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        name: \"\",\n        email: \"\",\n        password: \"\",\n      }}\n      validationSchema={validationRegistrSchema}\n      onSubmit={handleSubmit}\n      validateOnBlur\n    >\n      {({ isSubmitting, isValid, dirty }) => (\n        <Form className={s.regbackround}  >\n          <div className={s.titleFild}>\n          <p  className= {s.regtitleActive}>Registration</p>\n          <p   className= {s.regtitle}>Log In</p>\n          </div>\n         < div className={s.field}>\n          <label>\n            <Field className= {s.input}\n              name=\"name\"\n              placeholder=\"Enter your name\"\n              autoComplete=\"off\"\n            />\n            <ErrorMessage name=\"name\" />\n          </label>\n\n          <label>\n            <Field className= {s.input}\n              name=\"email\"\n              placeholder=\"Enter your email\"\n              type=\"email\"\n              autoComplete=\"off\"\n            />\n            <ErrorMessage name=\"email\" />\n          </label>\n\n          <label>\n            <Field  className= {s.input}\n              name=\"password\"\n              placeholder=\"Create a password\"\n              type=\"password\"\n              autoComplete=\"off\"\n            />\n            <ErrorMessage name=\"password\" />\n          </label>\n          </ div>\n          <button type=\"submit\" disabled={isSubmitting || !isValid || !dirty}>\n            Register Now\n          </button>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n","import { WelcomeLayout } from \"components/WelcomeLayout/WelcomeLayout\";\nimport { useParams } from \"react-router-dom\";\nimport { LoginForm } from \"components/forms/LoginForm/LoginForm\";\nimport { RegisterForm } from \"components/forms/RegisterForm/RegisterForm\";\nimport { Suspense } from \"react\";\n\nconst Auth = () => {\n  const { id } = useParams();\n  const getForm = (id) => {\n    switch(id) {\n      case 'login':\n        return <LoginForm />;\n      case 'register':\n        return <RegisterForm />;\n      default:\n        return <LoginForm />;\n    }\n  }\n  return (\n    <Suspense fallback={<p>Loading...</p>}>\n    <WelcomeLayout>\n      {getForm(id)}\n    </WelcomeLayout>\n    </Suspense>\n  );\n};\n\nexport default Auth;\n"],"names":["WelcomeLayout","_ref","children","_jsx","className","css","validationLoginSchema","Yup","shape","email","required","matches","password","min","max","validationRegistrSchema","name","comment","title","icon","background","description","labelColor","userPhoto","nullable","test","value","size","includes","type","LoginForm","userLogin","useUser","handleSubmit","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","setSubmitting","resetForm","wrap","_context","prev","next","t0","console","log","stop","_x","_x2","apply","arguments","Formik","initialValues","validationSchema","onSubmit","validateOnBlur","_ref3","isSubmitting","isValid","dirty","_jsxs","Form","s","Field","placeholder","ErrorMessage","disabled","RegisterForm","userRegister","autoComplete","id","useParams","Suspense","fallback","getForm"],"sourceRoot":""}